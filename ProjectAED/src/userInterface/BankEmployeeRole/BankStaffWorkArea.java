/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.BankEmployeeRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.BankEmployeeOrganization;
import Business.SessionHistory.UserSession;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RegisterReciepientRequest;
import Business.WorkQueue.TransferFundWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jaya_L
 */
public class BankStaffWorkArea extends javax.swing.JPanel {
private JPanel userProcessContainer;
private BankEmployeeOrganization organization;
private Enterprise enterprise;
private UserAccount userAccount;

private BankEmployeeOrganization bankOrganization;
FileWriter writer;

long t1;
 SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd HH:mm:ss"); 
 Calendar cal = Calendar.getInstance();
  UserSession session;
EcoSystem system;
    /**
     * Creates new form BankEmployeeWorkArea
     */
    public BankStaffWorkArea(JPanel userProcessContainer, UserAccount account, BankEmployeeOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.bankOrganization=(BankEmployeeOrganization)organization;
        this.enterprise=enterprise;
        this.userAccount=account;
        this.system=system;
      //  transferReq.setVisible(false);
        //AddRecepientRequestJTable.setVisible(false);
        jLabel1.setText("Hello"+" " +account.getUsername()+"You have work to do!");
      jScrollPane1.setVisible(false);
      jScrollPane2.setVisible(false);
       populateTable();
       reqToAddrecepient();
           
             
      try
       {
       
         writer=new FileWriter("C:\\Users\\jayal\\Desktop\\NEU\\AED Applications\\ProjectAED\\BankStaffSessions.txt",true);
          //bw=new BufferedWriter(writer);
          writer.write(System.lineSeparator());
          writer.write(System.lineSeparator());
          writer.write(" User" +account.getUsername() + "session" + "Loged in at"+sdf.format(cal.getTime()));
          writer.flush();
          //writer.close();
        //out = new PrintWriter(bw);
        
       
       }
        catch(IOException e)
        {
        System.out.println("Unable to write");
        
        } 
        
        
             
       
       
        
    }
void populateTable()
{
DefaultTableModel model = (DefaultTableModel)transferReq.getModel();
int balance;
Customer c;
model.setRowCount(0);
for(WorkRequest request : bankOrganization.getWorkQueue().getWorkRequestList()){
    
    
    
    if(request instanceof TransferFundWorkRequest){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getPerson().getName();
            c=(Customer)request.getSender().getPerson();
            
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getPerson().getName();
            row[3] = request.getStatus();
            
            model.addRow(row);
            
            
            
        }
    

}
}

void reqToAddrecepient()
{

DefaultTableModel model = (DefaultTableModel)AddRecepientRequestJTable.getModel();
int balance;
Customer c;
model.setRowCount(0);
for(WorkRequest request : bankOrganization.getWorkQueue().getWorkRequestList()){
    
    
    
    if(request instanceof RegisterReciepientRequest){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getPerson().getName();
            c=(Customer)request.getSender().getPerson();
            
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getPerson().getName();
            row[3] = request.getStatus();
            
            model.addRow(row);
            
            
            
        }
    

}


}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        transferReq = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        processJbutton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AddRecepientRequestJTable = new javax.swing.JTable();
        requestsJCombo = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        transferReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transferReq.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(transferReq);
        if (transferReq.getColumnModel().getColumnCount() > 0) {
            transferReq.getColumnModel().getColumn(0).setResizable(false);
            transferReq.getColumnModel().getColumn(1).setResizable(false);
            transferReq.getColumnModel().getColumn(2).setResizable(false);
            transferReq.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 469, 179));

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/refresh.png"))); // NOI18N
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(1164, 11, 63, 44));

        btnAssign.setText("Assign to Me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, -1, -1));

        processJbutton.setText("Work On It");
        processJbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJbuttonActionPerformed(evt);
            }
        });
        add(processJbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 330, 100, -1));

        AddRecepientRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(AddRecepientRequestJTable);
        if (AddRecepientRequestJTable.getColumnModel().getColumnCount() > 0) {
            AddRecepientRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            AddRecepientRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            AddRecepientRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            AddRecepientRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 469, 179));

        requestsJCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TransferFundRequest", "AddRecepientWorkRequest" }));
        requestsJCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                requestsJComboMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                requestsJComboMousePressed(evt);
            }
        });
        requestsJCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestsJComboActionPerformed(evt);
            }
        });
        add(requestsJCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 140, -1));

        jButton2.setText("Send Mail");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 140, -1));

        jButton1.setText("Request Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 140, -1));

        jLabel1.setText("value");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 210, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        
        
        
        
        
        
     try{

writer.write("Assigned requests to oneself --Normal Activity"+sdf.format(cal.getTime()));

}

catch(Exception e)
{}
        if(transferReq.isVisible()){
        int selectedRow = transferReq.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }
        
        
        
        
        
        
        WorkRequest request1 = (WorkRequest)transferReq.getValueAt(selectedRow, 0);
        
    if(request1.getStatus().equalsIgnoreCase("Completed"))
    {
    JOptionPane.showMessageDialog(null, "Work on selcted request is already completed. Select some other request");
    return;
    
    }
        
        
    if(request1.getStatus().equalsIgnoreCase("Pending"))
    {
    JOptionPane.showMessageDialog(null, "Work on selcted request is pending. Start working on it");
    return;
    
    }
        
        request1.setReceiver(userAccount);
        request1.setStatus("Pending");
        populateTable();
        }
        
         if(AddRecepientRequestJTable.isVisible()){
        int sRow =AddRecepientRequestJTable.getSelectedRow();
        
        if (sRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }
        WorkRequest request = (WorkRequest)AddRecepientRequestJTable.getValueAt(sRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        reqToAddrecepient();
        
        //();
        }
        
        
        
    }//GEN-LAST:event_btnAssignActionPerformed

    private void processJbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJbuttonActionPerformed
        // TODO add your handling code here:
        try{

writer.write("Worked on requests --Normal Activity"+sdf.format(cal.getTime()));

}

catch(Exception e)
{}
      if(transferReq.isVisible())  {
        int selectedRow = transferReq.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a request");
            return;
        }
        
        TransferFundWorkRequest request = (TransferFundWorkRequest)transferReq.getValueAt(selectedRow, 0);
     if(!request.getStatus().equalsIgnoreCase("Completed"))
     {
     JOptionPane.showMessageDialog(null, "Work is already done.Select some other request");
     return;
     
     }
        request.setStatus("Processing");
       final String username = "banknu0";
		final String password = "Lekhrajani90!";

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");

		Session session = Session.getInstance(props,
		  new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		  });
                
                
                try {

			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress("banknu0@gmail.com"));
			message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse("7326667221@cingularme.com "));
			message.setSubject("Fund Transfer Request Rejected.");
			message.setText("Dear ,"+"  " +request.getSender().getPerson().getName()
				+ "Rejected due to insufficient bal");

			Transport.send(message);

			System.out.println("Done");

		} catch (MessagingException e) {
			throw new RuntimeException(e);
		} 
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        ProcessTransferRequestJPanel processWorkRequestJPanel = new ProcessTransferRequestJPanel(userProcessContainer, request,request.getSender());
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
      }
      
      if(AddRecepientRequestJTable.isVisible())
      {
      
      int sRow = AddRecepientRequestJTable.getSelectedRow();
        
        if (sRow < 0){
            
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }
        
        RegisterReciepientRequest request1 = (RegisterReciepientRequest)AddRecepientRequestJTable.getValueAt(sRow, 0);
     
        request1.setStatus("Processing");
        
        ProcessAddRecepientRequest processWorkRequestJPanel = new ProcessAddRecepientRequest(userProcessContainer, request1);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
      
      
      
      }
      
      
    }//GEN-LAST:event_processJbuttonActionPerformed

    private void requestsJComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestsJComboActionPerformed
try{

writer.write("Checked Pending requests --Normal Activity"+sdf.format(cal.getTime()));

}

catch(Exception e)
{}
// TODO add your handling code here:
        
    }//GEN-LAST:event_requestsJComboActionPerformed

    private void requestsJComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestsJComboMouseClicked
        // TODO add your handling code here:
        String s=(String)requestsJCombo.getSelectedItem();
        if(s.contains("Transfer"))
            
        {
        jScrollPane2.setVisible(false);
        AddRecepientRequestJTable.setVisible(false);
        jScrollPane1.setVisible(true);
        transferReq.setVisible(true);
        
        
        }
        if(s.contains("Add"))
        {
            jScrollPane1.setVisible(false);
        transferReq.setVisible(false);
        jScrollPane2.setVisible(true);
        AddRecepientRequestJTable.setVisible(true);
        }
        
        
    }//GEN-LAST:event_requestsJComboMouseClicked

    private void requestsJComboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestsJComboMousePressed
        // TODO add your handling code here:
        
 
    }//GEN-LAST:event_requestsJComboMousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
  
        SendMailJPanel panel=new SendMailJPanel(userProcessContainer, userAccount,enterprise, system,writer);
        userProcessContainer.add("RequestDataJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        
        try{

writer.write("Requested for data --Normal Activity"+sdf.format(cal.getTime()));

}

catch(Exception e)
{}
        
        
        
        
        
        RequestDataJPanel panel=new RequestDataJPanel(userProcessContainer, userAccount,enterprise, system, writer);
        userProcessContainer.add("RequestDataJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AddRecepientRequestJTable;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJbutton;
    private javax.swing.JComboBox<String> requestsJCombo;
    private javax.swing.JTable transferReq;
    // End of variables declaration//GEN-END:variables
}
