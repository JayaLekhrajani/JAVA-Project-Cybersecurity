/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ReportingRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.IMTeamOrganization;
import Business.Organization.Organization;
//import Business.Organization.ReportingTeamOrganization;
import Business.Organization.ServiceDeskOrganization;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.SuspiciousActivityRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userInterface.BankEmployeeRole.ProcessSuspiciousActivity;

/**
 *
 * @author Jaya_L
 */
public class ReportingWorkArea extends javax.swing.JPanel {
private JPanel userProcessContainer;
private ServiceDeskOrganization organization;
private Enterprise enterprise;
private UserAccount userAccount;
EcoSystem system;
    /**
     * Creates new form ReportingWorkArea
     */
    public ReportingWorkArea(JPanel userProcessContainer, UserAccount account, ServiceDeskOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.organization=organization;
        this.enterprise= enterprise;
        this.userAccount=account;
        this.system=system;
        populateTable();
        
        
        
    }

    
    void populateTable()
    {
    DefaultTableModel model = (DefaultTableModel)SuspiciousActivityJTable.getModel();
model.setRowCount(0);
for(WorkRequest request : organization.getWorkQueue().getWorkRequestList())
{
if(request instanceof SuspiciousActivityRequest){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getPerson().getName();
            //=(Customer)request.getSender().getPerson();
            
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getPerson().getName();
            row[3] = request.getStatus();
            row[4]=((SuspiciousActivityRequest) request).getCriticallevel();
            
            model.addRow(row);
            
            
            
        }
    





}
    
    
    
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SuspiciousActivityJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        severityComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        messageJTextFeld = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        SuspiciousActivityJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Suspicious User Account", "Receiver", "Status", "Criticality"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SuspiciousActivityJTable);
        if (SuspiciousActivityJTable.getColumnModel().getColumnCount() > 0) {
            SuspiciousActivityJTable.getColumnModel().getColumn(1).setResizable(false);
            SuspiciousActivityJTable.getColumnModel().getColumn(2).setResizable(false);
            SuspiciousActivityJTable.getColumnModel().getColumn(3).setResizable(false);
            SuspiciousActivityJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Tickets");

        jButton1.setText("Assign it to me");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Work on It");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        severityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Critical", "Medium", "Low" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Assign Criticality");

        messageLabel.setText("Message");
        messageLabel.setEnabled(false);

        messageJTextFeld.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(severityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(messageLabel))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(messageJTextFeld, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(severityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageLabel)
                    .addComponent(messageJTextFeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = SuspiciousActivityJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a message");
            return;
        }
        
       WorkRequest request1 = (WorkRequest)SuspiciousActivityJTable.getValueAt(selectedRow, 0);
        request1.setReceiver(userAccount);
        request1.setStatus("Pending");
        populateTable();
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       int selectedRow = SuspiciousActivityJTable.getSelectedRow();
       if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }
       
           SuspiciousActivityRequest request1 = (SuspiciousActivityRequest)SuspiciousActivityJTable.getValueAt(selectedRow, 0);
           
        
       request1.setStatus("Processing");
        
        messageLabel.setEnabled(true);
        messageJTextFeld.setEnabled(true);
        String s=(String) severityComboBox.getSelectedItem();
        
        
        if(messageJTextFeld.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter the message");
            return;
            
        
        
        }
        
        
         
        
         if(s.equalsIgnoreCase("high"))
        {
        
        request1.setStatus("Completed");
        request1.setMessage(messageJTextFeld.getText());
        system.opentickets--;
        system.closedTickets++;
        system.hightickets++;
        request1.setCriticallevel(s);
        populateTable();
        
        return;
        
        }
        
        
        if(s.equalsIgnoreCase("medium"))
        {
        
        request1.setStatus("Completed");
         request1.setMessage(messageJTextFeld.getText());
        system.opentickets--;
        system.closedTickets++;
        system.mediumtickets++;
         request1.setCriticallevel(s);
         populateTable();
        
        return;
        
        }
        
           
        if(s.equalsIgnoreCase("critical"))
        {
        system.criticaltickets++;
        
        System.out.print(system.criticaltickets);
        request1.setMessage("Sending it to IM for further investigation");
        request1.setCriticallevel(s);
        populateTable();
        
        Organization imorg=null;
        for(Network n:system.getNetworkList())
            
        {
        
        for(Enterprise e:n.getEnterpriseDirectory().getEnterpriseList())
        {
        
        for(Organization o:e.getOrganizationDirectory().getOrganizationList())
        {
        
        if(o instanceof IMTeamOrganization) // to escalate it to IM Organization
        {
        
        imorg=o; 
        break;
        
        
        }
        if(imorg!=null)
            break;
        
        }
        
        
        
        if(imorg!=null)
            break;
        
        
        }
        
        
        
        
        
        
        }
        
        if(imorg!=null)
        {
     
            imorg.getWorkQueue().getWorkRequestList().add(request1); 
            //request1.setCriticallevel(s);
        
        
        
        }  
            
            
        
        
        
        
      
//return;
        
        
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

         
        
        
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SuspiciousActivityJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField messageJTextFeld;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JComboBox<String> severityComboBox;
    // End of variables declaration//GEN-END:variables
}
