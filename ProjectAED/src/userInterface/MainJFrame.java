    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface;

import AppPackage.AnimationClass;
import Business.Customer.Customer;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.BankEnterprise;
import Business.Enterprise.Enterprise;
import Business.IPAddresses;
import Business.IPAddressesBankEmployees;
import Business.Network.Network;
import Business.Organization.BankEmployeeOrganization;
import Business.Organization.MonitoringTeamOrganization;
import Business.Organization.Organization;
import Business.Organization.ServiceDeskOrganization;
import Business.Role.AdminRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SuspiciousActivityRequest;
import java.awt.Color;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import userInterface.CustomerRole.customerJFrame;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.UIManager;
import userInterface.CustomerRole.customerSecurtityJFrame;

/**
 *
 * @author Jaya_L
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    
    UserAccount blockedus=null; 
    UserAccount nocmonitor=null;
    FileWriter writer;
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    int sucevent;
    int failevent;
           
    Calendar cal = Calendar.getInstance();
    static int counter=1; 
    
    SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
    //static int counter=1;

   AnimationClass AC=new AnimationClass();
    public MainJFrame() {
        initComponents();
     setTitle("Login");
       jPanel1.setBackground(Color.WHITE);
          system = dB4OUtil.retrieveSystem();
              SlideShow();
    }
    public void SlideShow()
    {
    new  Thread() //for implementing animation
        {
            
            int count;
        @Override
        public void run()
        {
        try
        {
        while(true)
        {
        
            switch(count)
        {
                case 0:
                 AC.jLabelXLeft(0, -830, 22, 10, jLabel4);//(start - The pixel value where the component will start the animation from

//stop - The pixel value where the component will stop moving delay - Delay between each pixel increment
//increment - The number of pixels to movejLabel - The variable name of the JLabel you want to move
                 AC.jLabelXLeft(830, -830, 22, 10, jLabel3);
                 AC.jLabelXLeft(1660, -830, 22, 10, jLabel1);
                 AC.jLabelXLeft(2490, 0, 22, 10, jLabel5);
                 count=1;
                 break;
            
        }
        
        
        }
        }
        
        catch(Exception e)
        {
        
        }
        
        }
        
        }.start();
        
    }
    






    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        userNameJTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        jButton2btnforgotPassword = new javax.swing.JButton();
        bankLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 720));
        jPanel1.setLayout(null);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/jp.png"))); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(131, 100));
        jLabel2.setMinimumSize(new java.awt.Dimension(131, 100));
        jLabel2.setPreferredSize(new java.awt.Dimension(131, 100));
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 0, 131, 110);

        jLabel4.setForeground(new java.awt.Color(0, 102, 204));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/1.png"))); // NOI18N
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)));
        jPanel1.add(jLabel4);
        jLabel4.setBounds(0, 108, 830, 188);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Apply online Banner.png"))); // NOI18N
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)));
        jPanel1.add(jLabel3);
        jLabel3.setBounds(830, 110, 830, 186);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/mob.png"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(1660, 108, 830, 184);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/saving.png"))); // NOI18N
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)));
        jPanel1.add(jLabel5);
        jLabel5.setBounds(2490, 108, 830, 186);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/menu.png"))); // NOI18N
        jPanel1.add(jLabel6);
        jLabel6.setBounds(0, 650, 790, 20);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/desc.png"))); // NOI18N
        jPanel1.add(jLabel9);
        jLabel9.setBounds(0, 470, 830, 180);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 51, 51), 5, true));

        jSplitPane1.setBackground(new java.awt.Color(255, 255, 255));
        jSplitPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(0);
        jSplitPane1.setOpaque(false);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(0, 0));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/login.png"))); // NOI18N
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 255));
        jLabel8.setText("User ID");

        jLabel10.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 102, 255));
        jLabel10.setText("Password");

        userNameJTextField.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        userNameJTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 102, 204)));
        userNameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameJTextFieldActionPerformed(evt);
            }
        });

        passwordField.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        passwordField.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 51, 255)));
        passwordField.setCaretColor(new java.awt.Color(102, 102, 102));

        btnLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/loginbutton.png"))); // NOI18N
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jButton2btnforgotPassword.setBackground(new java.awt.Color(255, 255, 255));
        jButton2btnforgotPassword.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        jButton2btnforgotPassword.setText("Forgot Password");
        jButton2btnforgotPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2btnforgotPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2btnforgotPassword)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2btnforgotPassword)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(510, 300, 250, 160);

        bankLabel.setBackground(new java.awt.Color(255, 255, 255));
        bankLabel.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        bankLabel.setForeground(new java.awt.Color(0, 102, 204));
        bankLabel.setText("NU Bank");
        jPanel1.add(bankLabel);
        bankLabel.setBounds(160, 20, 200, 70);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/close.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(770, 0, 30, 31);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7MouseClicked

    private void userNameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameJTextFieldActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
UserAccount blockedus=null;        // TODO add your handling code here:
       
 Organization noc=null;  
 
        // Get user name
        String userName = userNameJTextField.getText();
        // Get Password
        char[] passwordCharArray = passwordField.getPassword();
        String password = String.valueOf(passwordCharArray);
        
        
        
        
      
        //Step1: Check in the system user account directory if you have the user
        
        
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
        BankEnterprise ben;
       // UserAccount hackerAccount;
                
        
        
        if (userAccount == null) {
            //Step2: Go inside each network to check each enterprise
            
            for (Network network : system.getNetworkList()) {
                //Step 2-a: Check against each enterprise
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                    if (userAccount == null) {
                        
                        
                        //Step3: Check against each organization inside that enterprise
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount != null) {
                                
                            
                                    inEnterprise=enterprise;
                                inOrganization=organization;
                                break;
                                
                                
                                
                                
                                
                            }
            
                            
                        }
                    }
                    else 
                    {
                        inEnterprise = enterprise;
                        break;
                    }
                    if (inOrganization != null) //upon finding account at organization level
                    {
                        break;
                    }
                }
                if (inEnterprise != null) {
                    break;
                }
            }
        }
        //int p;
          //p=counter;
          
            if(userAccount!=null&& userAccount.getPerson() instanceof Customer) 
            {// to check whether it is a customer account
                
           // to verify customer's credentials and whether his account is not locked     
                
       
           if(userAccount.isFlag()!=true)// account is not locked
           {
               sucevent++;
         
             //successfulattempts++;
               
               system.numberofsuccessfulevents++;
              
               System.out.print(system.numberofsuccessfulevents);
               
               try{ // to verify whether he has logged in from the list of calid IPAdresses
               InetAddress  addr= InetAddress.getLocalHost();
               String hostname = addr.getHostName();
               NetworkInterface network = NetworkInterface.getByInetAddress(addr);
      byte[] mac= network.getHardwareAddress();
      StringBuilder sb = new StringBuilder();
		for (int i = 0; i < mac.length; i++) {
			sb.append(String.format("%02X", mac[i], (i < mac.length - 1) ? "-" : ""));		
		}
               
               IPAddresses ips=system.getValidIPlist();
              if(ips.authenticate(sb.toString()))
              {
             
                  
          try
       
       { 
                
              writer=new FileWriter("C:\\Users\\jayal\\Desktop\\NEU\\AED Applications\\ProjectAED\\Session Logs.txt",true);
           
           writer.write(System.lineSeparator());
           writer.write(userAccount.getUsername()+"Logged in from valid MAC ID"+""+sdf.format(cal.getTimeInMillis()));
           
         customerJFrame cus=new customerJFrame((Customer)userAccount.getPerson(), userName, password, inEnterprise, system, dB4OUtil,userAccount);
           this.dispose();
           cus.setVisible(true);
           return;  
           
           
           
           
           
       }   
        
     catch(IOException g)
     
     
     {
  
     }        
        
                  
              }
               
      
                  
              if(! ips.authenticate(sb.toString()))
              {
             system.networksuspiciousevents++;
             System.out.print("Network suspicious events"+system.networksuspiciousevents);
               try
       
       { 
                
              writer=new FileWriter("C:\\Users\\jayal\\Desktop\\NEU\\AED Applications\\ProjectAED\\Session Logs.txt",true);
           
           writer.write(System.lineSeparator());
           writer.write(userAccount.getUsername()+"Did not login from registered MAC Id"+""+sdf.format(cal.getTimeInMillis()));
           
           
           
           
       }   
        
     catch(IOException g)
     
     
     {
  
     }
             
   
        final String username = "banknu0";
		final String password1 = "Lekhrajani90!";

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");

		Session session = Session.getInstance(props,
		  new javax.mail.Authenticator() {
			protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				return new javax.mail.PasswordAuthentication(username, password1);
			}
		  });
                
                
                try {

			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress("banknu0@gmail.com"));
			message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse("jayalekhrajani26@gmail.com"));
			message.setSubject("Login Alert");
			message.setText("Your account was recently logged in from new device");

			Transport.send(message);

			System.out.println("Done");

		} catch (MessagingException e) {
			throw new RuntimeException(e);
		}
               
               
               
        if(userAccount.getSh().getSessionHistoryList().size()>0){       
            customerSecurtityJFrame security=new customerSecurtityJFrame((Customer)userAccount.getPerson(), userName, password, inEnterprise, system, dB4OUtil,userAccount);
         this.dispose();
         security.setVisible(true);
          return;  
   
        }
            
        
        
        
        
               
               
              }      
                  
                  
               }

               
               
               
               catch(Exception e)
               {
   
               }
               
               
               
               
               
               customerJFrame cus=new customerJFrame((Customer)userAccount.getPerson(), userName, password, inEnterprise, system, dB4OUtil,userAccount);
           this.dispose();
           cus.setVisible(true);
           return;
           }
           
           
           else
               
           {//failedattempts++;
           
        failevent++;
         
             //successfulattempts++;
               
system.numberofunsuccessfulevents++;              
               System.out.print(system.numberofunsuccessfulevents);
               
               JOptionPane.showMessageDialog(null, "Account has been locked. Please contact Service Desk!");
               
               
               
               
               
               
           }
           
       }
       
       if(userAccount!=null && userAccount.getPerson() instanceof Employee && (userAccount.isFlag()==true))
       
       {
       
       JOptionPane.showMessageDialog(null, "Your account has been locked due to security purpose. Contact Admin");
       return;
       
       }
       if(userAccount!=null && userAccount.getPerson() instanceof Employee && (userAccount.isFlag()!=true))// to check whether it is an employee
       
       //to check if employee has logged in from set of registered MAC ID registered on their network
       {    
          // successfulattempts++;
         sucevent++;
         system.numberofsuccessfulevents++;
             //successfulattempts++;
               
               //system.setNumberofsuccessfulevents(system.getNumberofsuccessfulevents()+sucevent);
              
               //System.out.print(system.getNumberofsuccessfulevents()+sucevent);
               System.out.print(system.numberofsuccessfulevents);
               
               try{// to check if the user has logged in from registered IP address
               InetAddress  addr= InetAddress.getLocalHost();
               String hostname = addr.getHostName();
               NetworkInterface network = NetworkInterface.getByInetAddress(addr);
      byte[] mac= network.getHardwareAddress();
      StringBuilder sb1 = new StringBuilder();
		for(byte b : mac){

        if(sb1.length() > 0)
            sb1.append("-");

        sb1.append(String.format("%02X", b));
                }
                   IPAddressesBankEmployees ips1=system.getValidIPlistEmployees();
              if(!ips1.authenticate(sb1.toString())&& inOrganization instanceof BankEmployeeOrganization)
              {
              System.out.println("not a registered MAC ID"); 
             // system.setNumberofsuspiciousevents((system.getNumberofsuspiciousevents())+1);
              system.networksuspiciousevents++;
            system.opentickets++;
                  SuspiciousActivityRequest request=new SuspiciousActivityRequest();
                  request.setMessage("Successful login from unregistered IP Address");
                  request.setSender(userAccount);
                  request.setStatus("Sent");
                //to check if an employee has logged in from different network  
               for (Network network1 : system.getNetworkList())
               {
                for (Enterprise enterprise1 : network1.getEnterpriseDirectory().getEnterpriseList())
                    
                {
                if(enterprise1.getEnterpriseType()==enterprise1.getEnterpriseType().SOCENTERPRISE)
                {
                
                if(enterprise1.getNetworkname().equalsIgnoreCase(inEnterprise.getNetworkname()))
                {
                
                
                for (Organization organization1 : enterprise1.getOrganizationDirectory().getOrganizationList()){
            if (organization1 instanceof MonitoringTeamOrganization){
                noc = organization1;
                break;
            }
        }
                
                
              if(noc!=null)
                  break;
                }
                    
                    
                
                
                }
                
               if(noc!=null)
                   break;
                
                }
          
              
              
              
               }              
              
              
            if (noc!=null){
            noc.getWorkQueue().getWorkRequestList().add(request);  
            }
              
              
              
              
              
  
              
               try
       
       { 
                
              //writer=new FileWriter("C:\\Users\\jayal\\Desktop\\NEU\\AED Applications\\ProjectAED\\Session Logs.txt",true);
           
           writer.write(System.lineSeparator());
           writer.write("Did not login from registered MAC Id"+""+sdf.format(cal.getTimeInMillis()));
       }   
        
     catch(IOException g)
     
     
     {
  
     }
              
              
              
              
             // system.setOpentickets(system.getOpentickets()+1);
            
               
               
              
              
              }
               
               }
               
              
               
               
               
               catch(Exception e)
               {
         
               }
               
              
       //frames for employees
               
        MainJFrame1 mjf= new MainJFrame1(userName, passwordCharArray, userAccount.getRole(),userAccount,inOrganization,inEnterprise, system, dB4OUtil);
        mjf.genCode(userName, passwordCharArray, userAccount.getRole(),userAccount,inOrganization,inEnterprise, system);
        this.dispose();
        mjf.setVisible(true);
       
       }
       
       
       
       
       
        if (userAccount == null) {
            // to lock customer's account on 3 consecutive attemots of failed authentication
            
           failevent++;
         
             //successfulattempts++;
               
               //system.setNumberofunsuccessfulevents(system.getNumberofunsuccessfulevents()+failevent);
              system.numberofunsuccessfulevents++;
               //System.out.print(system.getNumberofunsuccessfulevents()+failevent);
               
            JOptionPane.showMessageDialog(null, "Invalid credentials");
            System.out.print(system.numberofunsuccessfulevents);
                   String blockedUserAccountname=userNameJTextField.getText();
                   
                 
               String searchname;    
              // int counter=0;
               
         for(Network n:system.getNetworkList())
         {
             
             
         for(Enterprise e:n.getEnterpriseDirectory().getEnterpriseList())
         {
             
             
             for(int i=0;i<e.getUserAccountDirectory().getUserAccountList().size();i++)
             
         {
       UserAccount ua=e.getUserAccountDirectory().getUserAccountList().get(i);
       
       if(ua.isFlag()==true&&ua.getUsername().equals(userNameJTextField.getText()))
           
       {
      // failedattempts++;
         failevent++;
         
             //successfulattempts++;
              system.numberofunsuccessfulevents++; 
               //system.setNumberofunsuccessfulevents(system.getNumberofunsuccessfulevents()+failevent);
              
               //System.out.print(system.getNumberofunsuccessfulevents()+failevent);
               
       JOptionPane.showMessageDialog(null, "Account has been locked!");
       
     
               
       
       
       
       
       
       return;
       }  
                  
               if(ua.getUsername().equals(userNameJTextField.getText())&&ua.getRole() instanceof AdminRole)
                   
                   
                              {

               
               
               SuspiciousActivityRequest requestadminaccount= new SuspiciousActivityRequest();
               requestadminaccount.setCriticallevel("Critical");
               requestadminaccount.setSender(ua);
               requestadminaccount.setMessage("Someone is trying to use admin's credentials");
               requestadminaccount.setStatus("Sent");
               requestadminaccount.setRequestDate(cal.getInstance().getTime());
               Organization noc1=null;
               
               for (Network network2 : system.getNetworkList())
               {
                for (Enterprise enterprise2 : network2.getEnterpriseDirectory().getEnterpriseList())
                    
                {
                if(enterprise2.getEnterpriseType()==enterprise2.getEnterpriseType().SOCENTERPRISE)
                {
                
                //if(enterprise1.getNetworkname().equalsIgnoreCase(inEnterprise.getNetworkname()))
                {
                
                
                for (Organization organization2 : enterprise2.getOrganizationDirectory().getOrganizationList()){
            if (organization2 instanceof MonitoringTeamOrganization){
                noc1 = organization2;
                break;
            }
        }
                
                
              if(noc1!=null)
                  break;
                }
                    
                    
                
                
                }
                
               if(noc1!=null)
                   break;
                
                }
          
              
              
              
               }              
              
              
            if (noc1!=null){
            noc1.getWorkQueue().getWorkRequestList().add(requestadminaccount);  
            }
              
              
              
               
               
               
               
               
               }
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
      
       
             if(ua.getUsername().equals(userNameJTextField.getText())&&counter<3&& !(ua.getRole() instanceof AdminRole))
             {
                 
                 counter++;// to keep track of consecutive times a user with valid useraccount name
                 //tries to login unsuccessfully to ensure account safety
                 
      
             }
             
           if(counter==3)
           {
               
                JOptionPane.showMessageDialog(null, "Account has been locked!");
               //failedattempts++;
             failevent++;
         
             //successfulattempts++;
               system.numberofunsuccessfulevents++;
               //system.setNumberofunsuccessfulevents(system.getNumberofunsuccessfulevents()+failevent);
              
               //System.out.print(system.getNumberofunsuccessfulevents()+failevent);
               
               blockedus=ua;
               blockedus.setFlag(true);
        
               
        
       
      
       
       
       SuspiciousActivityRequest requestaccountlock=new SuspiciousActivityRequest();
       requestaccountlock.setMessage("Failed authentication");
       system.opentickets++;
       requestaccountlock.setSender(blockedus);
requestaccountlock.setStatus("Sent");
requestaccountlock.setRequestDate(cal.getInstance().getTime());

Organization servicedesk=null;
      for (Network network2 : system.getNetworkList())
               {
                for (Enterprise enterprise1 : network2.getEnterpriseDirectory().getEnterpriseList())
                    
                {
                if(enterprise1.getEnterpriseType()==enterprise1.getEnterpriseType().SOCENTERPRISE)
                {
                
                //if(enterprise1.getNetworkname().equalsIgnoreCase(inEnterprise.getNetworkname()))
                {
                
                
                for (Organization organization2 : enterprise1.getOrganizationDirectory().getOrganizationList()){
            if (organization2 instanceof ServiceDeskOrganization){
                servicedesk = organization2;
                break;
            }
        }
                
                
              if(servicedesk!=null)
                  break;
                }
                    
                    
                
                
                }
                
               if(servicedesk!=null)
                   break;
                
                }
          
              
              
              
               }              
              
              
            if (servicedesk!=null){
            servicedesk.getWorkQueue().getWorkRequestList().add(requestaccountlock);  
            }

       
       
       
       
       
       
       
        try{// to check if the user has logged in from registered IP address
               InetAddress  addr1= InetAddress.getLocalHost();
               String hostname = addr1.getHostName();
               NetworkInterface network1 = NetworkInterface.getByInetAddress(addr1);
      byte[] mac= network1.getHardwareAddress();
      StringBuilder sb2 = new StringBuilder();
		for(byte b1 : mac){

        if(sb2.length() > 0)
            sb2.append("-");

        sb2.append(String.format("%02X", b1));
                }
               IPAddresses ips1=system.getValidIPlist();
              if(!ips1.authenticate(sb2.toString()))
              {System.out.println("not a registered MAC ID"); 
              system.setNumberofsuspiciousevents((system.getNumberofsuspiciousevents())+1);
              
              system.setOpentickets(system.getOpentickets()+1);
                  SuspiciousActivityRequest request1=new SuspiciousActivityRequest();
                  request1.setMessage("Successful login from unregistered MAC ID");
                  request1.setSender(userAccount);
                  request1.setStatus("Sent");
                  
               for (Network network2 : system.getNetworkList())
               {
                for (Enterprise enterprise1 : network2.getEnterpriseDirectory().getEnterpriseList())
                    
                {
                if(enterprise1.getEnterpriseType()==enterprise1.getEnterpriseType().SOCENTERPRISE)
                {
                
                
                
                
                for (Organization organization2 : enterprise1.getOrganizationDirectory().getOrganizationList()){
            if (organization2 instanceof MonitoringTeamOrganization){
                noc = organization2;
                break;
            }
        }
                
                
              if(noc!=null)
                  break;
                
                    
                    
                
                
                }
                
               if(noc!=null)
                   break;
                
                }
          
              
              
              
               }              
              
              
            if (noc!=null){
            noc.getWorkQueue().getWorkRequestList().add(request1);  
            }
               
               
              
              
              }
               
               }
               
              
               
               
               
               catch(Exception ex1)
               {
     
               } 
       
       
       
       
       
       
      
               return;
           
           
           }
         
         }
             
             
         }
         
         
         
         }
         
       
          
        
      
         
          
         
            
            
            
           
        } 
        
     
       // for employees
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
     
        
        
        
        
        
        
    }//GEN-LAST:event_btnLoginActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         //counter=0;
        dB4OUtil.storeSystem(system);
        
           //container.removeAll();
        //MainJFrame mf=new MainJFrame();
        this.dispose();
        System.exit(0);
       
        //mf.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2btnforgotPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2btnforgotPasswordActionPerformed
        // TODO add your handling code here:
        
      PasswordChangeRequestJFRame jframe=new PasswordChangeRequestJFRame(system, dB4OUtil);
      jframe.setVisible(true);
      this.dispose();;
        
      
        
        
        
    }//GEN-LAST:event_jButton2btnforgotPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                  UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                
                try
                {
                Thread.sleep(4500);
                }
                
                catch(Exception e)
                {
                
                
                 }
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bankLabel;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2btnforgotPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField userNameJTextField;
    // End of variables declaration//GEN-END:variables
}
